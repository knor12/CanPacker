/*
*this file is auto generated by  CanPacker version V0.06.
*@file ./description.csv
*@date 2023-05-06
*@author n.kessa
*@brief frame packer/unpacker ./description.csv
*/




#ifndef CAN_DEVICE
#define CAN_DEVICE

#ifdef __cplusplus
extern "C"
{
#endif		/* __cplusplus */


#include "CAN_DEVICE_glue.h"
#include <stdbool.h>
#include <stdint.h>


/*user defined function return ticks elapsed in milliseconds since start of program execution */
extern uint32_t CAN_DEVICE_ticksMs(void);

/*user defined function return ticks elapsed in milliseconds since stampMs*/
extern uint32_t CAN_DEVICE_ticksSince(uint32_t stampMs);

/*user defined function that sends frames over the can bus */
extern bool CAN_DEVICE_sendFrame(uint32_t id, uint8_t * pData);

/*call this function cyclically to send out:
	-cyclic frames,
	-frames that are sent out when changed */
void CAN_DEVICE_cyclic(void);

void CAN_DEVICE_parse(uint32_t id, uint8_t * pData);

typedef enum
{
    ON = 1,/*light on*/
    OFF = 0,/*light off */

} ON_OFF_t;
typedef enum
{
    PUSHED = 10,/*button pushed on*/
    RELEASED = 20,/*button released*/

} BUTTON_STATE_t;
typedef enum
{
    voltage_within_range = 22,/*good*/
    voltage_over_voltgae = 33,/*no gooood*/
    voltage_under_votgae = 44,/*no good*/

} VOLTAGE_STATE_STATE_t;







/*"	send device health data to others		"*/
bool HEALTH_pack(
    const uint32_t ID,
    uint8_t * pData
    /*,const uint32_t HEALTH_MULTIPLEXOR */ /*key */ /*is a constant no argument is used*/
    /*,const  uint16_t VOLTAGe_HEALTH */  /*value taken from get_voltageUpdate(), */
    /*,const  uint16_t CURRENTHEALTH */  /*value taken from get_current(), */
    /*,const  ON_OFF_t IO */  /*value taken from get_IO(), */ );

/*"	resets device		"*/
bool RESET_pack(
    const uint32_t ID,
    uint8_t * pData
    /*,const uint32_t RESET_CONSTANT */  /*is a constant no argument is used*/);






/*"	send device health data to others		"*/
bool HEALTH_unpack(
    const uint32_t ID,
    const uint8_t * pData
    /*uint32_t HEALTH_MULTIPLEXOR */ /*key */ /*is a constant no argument is used*/
    /*uint16_t * VOLTAGe_HEALTH */  /*value set to set_voltageUpdate() */
    /*uint16_t * CURRENTHEALTH */  /*value set to set_current() */
    /*ON_OFF_t * IO */  /*value set to set_IO_ON_OFF() */ );

/*"	resets device		"*/
bool RESET_unpack(
    const uint32_t ID,
    const uint8_t * pData
    /*uint32_t RESET_CONSTANT */  /*is a constant no argument is used*/);

#ifdef __cplusplus
}
#endif		/* __cplusplus */





#endif /*CAN_DEVICE*/